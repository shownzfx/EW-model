nest() %>%
mutate(n=c(2,5,3))
load("C:/Z-Work/E-Gov Updated/Egov Descriptive paper/Data for Twitter Visuals CLEAN 0212.RData")
summary(twitter$Number.of.Followers)  #61 missing
summary(twitter$Number.of.Followers)  #61 missing
summary(twitter$Number.Following)  #61 missing
sapply(1:3,function(x) summary(twitter$Number.Following[twitter$pop2005_3cats==x]))
sapply(1:3,function(x) summary(twitter$Number.of.Followers[twitter$pop2005_3cats==x]))
sapply(1:3,function(x) summary(twitter$Number.Following[twitter$pop2005_3cats==x]))
TukeyHSD(aov_following)
aov_following<-aov(Number.Following~as.factor(pop2005_3cats), twitter)
TukeyHSD(aov_following)
TukeyHSD(aov_following)
aov_following<-aov(Number.Following~as.factor(pop2005_3cats), twitter)
TukeyHSD(aov_following)
save.image("C:/Z-Work/E-Gov Updated/Egov Descriptive paper/Data for Twitter Visuals CLEAN 0212.RData")
install.packages("RQDA")
library(RQDA)
library(RQDA)
library(RQDA)
RQDA()
a<-data.frame(x=c(0,1,0,1), y=(1,1,1,0))
a<-data.frame(x=c(0,1,0,1), y=(1,1,1,0))
a<-data.frame(x=c(0,1,0,1), y=c(1,1,1,0))
t.test(x~y, a)
t.test(x~y, a)
?sample
a<-data.frame(x=sample(c(0,1), 50), y=sample(c(0,1), 50))
a<-data.frame(x=sample(c(0,1), 50,replace = T), y=sample(c(0,1), 50),replace=T)
a<-data.frame(x=sample(c(0,1), 50,replace = T), y=sample(c(0,1), 50),replace = T)
a<-data.frame(x=sample(c(0,1), 50,replace = T), y=sample(c(0,1), 50,replace = T))
t.test(x~y, a)
RQDA()
RQDA()
RQDA()
library(dplyr)
bare_to_quo<-function(x,car){
x %>% select(!!var) %>% head(1)
}
bare_to_quo(mtcars,quo(cyl))
library(dplyr)
bare_to_quo(mtcars,quo(cyl))
bare_to_quo<-function(x,car){
x %>% select(!!var) %>% head(1)
}
bare_to_quo(mtcars,quo(cyl))
bare_to_quo<-function(x,car){
x %>% select(!!var)
%>% head(1)
}
bare_to_quo<-function(x,car){
x %>%
select(!!var)%>%
head(1)
}
bare_to_quo(mtcars,quo(cyl))
library(dplyr)
library(rlang)
install.packages("rlang")
library(rlang)
library(dplyr)
library(rlang)
install.packages("rlang")
.libPaths()
install.packages("rlang")
Sys.getenv("R_LIBS_USER")
library(purrr)
library(dplyr)
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary) %>%
map_dbl("r.squared")
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary)
?split
mtcars %>%
(cyl)
mtcars %>%
split(cyl)
mtcars %>%
group(cyl)
mtcars %>%
group_by(cyl)
mtcars %>%
split(.$cyl)
mtcars %>%
group_by(cyl) %>%
arrange(cyl)
library(plyr)
?ddply
mtcars %>%
ddply(.cyl)
ddply(mtcars,.(cyl))
ddply(mtcars,.(cyl), summarise,avgvs=mean(vs))
mtcars %>% split(.$cyl)
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.))
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary)
summary(lm(mpg~wt,mtcars))
objects(summary(lm(mpg~wt,mtcars)))
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary) %>%
map(r.squared)
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary) %>%
map("r.squared")
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary) %>%
map(`r.squared`)
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary) %>%
map("r.squared")
mtcars %>% split(.$cyl) %>%
map(~lm(mpg~wt,data=.)) %>%
map(summary) %>%
map_dbl("r.squared")
?map_dbl
list(m1 = mean, m2 = median) %>%
invoke_map_dbl(x=rcauchy(100))
invoke(runif,list(n=10))
invoke(runif,n=10)
# Combine the two:
invoke(paste, list("01a", "01b"), sep = "-")
# That's more natural as part of a pipeline:
list("01a", "01b") %>%
invoke(paste, ., sep = "-")
list("01a", "01b") %>%
invoke(paste, ., sep = "-")
# Invoke a list of functions, each with different arguments
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
invoke_map(c(runif,rnorm), list(list(n=10), list(n=5)))
# Or with the same inputs:
invoke_map(list(runif, rnorm), list(list(n = 5)))
invoke_map(list(runif, rnorm), n = 5)
invoke(mean,list(a=1:10,b=2:11))
invoke_map(mean,list(a=1:10,b=2:11))
invoke_map(mean,list(a=1:10,b=11:20))
invoke_map(max,list(a=1:10,b=11:20))
# Or the same function with different inputs:
invoke_map("runif", list(list(n = 5), list(n = 10)))
library(purrr)
library(dplyr)
list(list(n = 10)
）
list(n = 5)
# Invoke a list of functions, each with different arguments
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
invoke_map(list(runif, rnorm), list(n = 10), list(n = 5)))
invoke_map(list(runif, rnorm), list(n = 10), list(n = 5))
list(list(n = 10), list(n = 5))
# Invoke a list of functions, each with different arguments
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
invoke_map(c(runif,rnorm), list(list(n=10), list(n=5)))
list(m1 = mean, m2 = median) %>%
invoke_map_dbl(x=rcauchy(100))
?invoke
list(list(n = 10), list(n = 5))
runif(10)
runif(5)
invoke_map(c(runif,rnorm), list(list(n=10), list(n=5)))
invoke_map(list(runif, rnorm), n = 5)
# Or with the same inputs:
invoke_map(list(runif, rnorm), list(list(n = 5)))
invoke_map()
# Or the same function with different inputs:
invoke_map("runif", list(list(n = 5), list(n = 10)))
# Or as a pipeline
list(m1 = mean, m2 = median) %>% invoke_map(x = rcauchy(100))
list(m1 = mean, m2 = median) %>% invoke_map_dbl(x = rcauchy(100))
# Note that you can also match by position by explicitly omitting `.x`.
# This can be useful when the argument names of the functions are not
# identical
list(m1 = mean, m2 = median) %>%
invoke_map(, rcauchy(100))
# If you have pairs of function name and arguments, it's natural
# to store them in a data frame. Here we use a tibble because
# it has better support for list-columns
df <- tibble::tibble(
f = c("runif", "rpois", "rnorm"),
params = list(
list(n = 10),
list(n = 5, lambda = 10),
list(n = 10, mean = -3, sd = 10)
)
)
df
library(tibble)
df<-tibble(
f<-c("runif","rpois","rnorm"),
params=list(
list(n=10),
list(n=5,lambda=10),
list(n=10,mean=-3,sd=10)
)
)
df
invoke_map(df$f, df$params)
invoke_map(df$f, df$params)
df<-tibble::tibble (
f=c("runif","rpois","rnorm"),
params=list(
list(n=10),
list(n=5, lambda=10),
list(n=10,mean=-3,sd=10)
)
)
invoke_map(df$f,df$params)
df<-tibble::tibble (
f=c("runif","rpois","rnorm"),
params=list(
list(n=10),
list(n=5, lambda=10),
list(n=10,mean=-3,sd=10)
)
)
invoke_map(df$f,df$params)
#error checking in names
library(xlsx)
data<-read.xlsx("Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame v2.xlsx",
sheetIndex = 1, encoding ="UTF-8")
names(data)
names(data)
?substr
data[str(data$Name_cleaned,1,1)==str(data$Name1,1,1),]
library(plyr)
library(dplyr)
library(purrr)
names(data)
data %>% map_if(is.factor,is.character)
data %>% map_if(is.factor,is.character) %>% str()
data<-read.xlsx("Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame v2.xlsx",
sheetIndex = 1, encoding ="UTF-8")
names(data)
data %>% map_if(is.factor,as.character) %>% str()
data[str(data$Name_cleaned,1,1)==str(data$Name1,1,1),]
data[substr(data$Name_cleaned,1,1)==substr(data$Name1,1,1),]
data[substr(data$Name_cleaned,1,1)!=substr(data$Name1,1,1),]
data %>% mutate(sameFirstLetter=if_else(substr(Name_cleaned,1,1)==substr(Name1,1,1),1,0))
data<-data %>% mutate(sameFirstLetter=if_else(substr(Name_cleaned,1,1)==substr(Name1,1,1),1,0))
table(data$sameFirstLetter)
View(data)
?write.xlsx
write.xlsx(data,"Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame 0308.xlsx",row.names = F)
?write.csv
data$Name1
View(data)
grep("Akpona Tèwogbadé Jean Didier
",data$Name1)
?Encoding
Encoding(data$Name1)
Encoding(data)
Encoding(data$Name1)
data$Name1
data %>% map_if(is.factor,as.character) %>% str()
Encoding(data$Name1)
class(data$Name1)
data %>% map_if(is.factor,as.character) %>% str()
str(data$Name1)
?map_if
data<-data %>% map_if(is.factor,as.character) %>% str()
str(data$Name1)
str(data)
data<-data %>% map_if(is.factor,as.character) %>% str()
data<-read.xlsx("Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame v2.xlsx",
sheetIndex = 1, encoding ="UTF-8")
names(data)
data<-data %>% map_if(is.factor,as.character)
str(data)
data<-read.xlsx("Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame v2.xlsx",
sheetIndex = 1, encoding ="UTF-8")
data<-read.xlsx("Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame 0308.xlsx",
sheetIndex = 1, encoding ="UTF-8")
names(data)
data<-data %>% map_if(is.factor,as.character)
str(data)
Encoding(data$Name1)
data$Name2<-iconv(data$Name1,Encoding(data$Name1),"ASCII",sub = "")
Encoding(data$Name1)<-"UTF-8"
Encoding(data$Name1)
data$Name1[12,]
data$Name1[12]
?xlsx
?write.xl
?write.xlXS
?write.xlsx
map_if(is.factor,as.character)
iconv(data$Name1,Encoding(data$Name1),"ASCII",sub = "")
data$Name2<-iconv(data$Name1,"UTF-8","ASCII",sub = "")
data$Name2
names(data)
data<-data %>% select(County,Name_cleaned,Name1,Name2,surveyedBefore:sameFirstLetter)
data %>% select(surveyedBefore:sameFirstLetter)
data %>% select_(surveyedBefore:sameFirstLetter)
data %>% select_('surveyedBefore:sameFirstLetter')
data %>% select_('surveyedBefore:sameFirstLetter')
data %>% select(surveyedBefore:sameFirstLetter)
data %>% select(County,Name_cleaned,Name1,Name2)
data$Name2
data$Name1
data %>% select(County,Name_cleaned,Name1,Name2)
data %>% select(Country,Name_cleaned,Name1,Name2)
data %>% select(Name1,Name2,Name_cleaned,Country)
data %>% select(one_of(Name1,Name2,Name_cleaned,Country))
data %>% select(one_of("Name1","Name2","Name_cleaned","Country"))
data[,c("Name_cleaned","Name1","Name2")]
View(data)
data<-read.xlsx("Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame 0308.xlsx",
sheetIndex = 1, encoding ="UTF-8")
names(data)
data<-data %>% map_if(is.factor,as.character)
str(data)
data$Name2<-iconv(data$Name1,"UTF-8","ASCII",sub = "")
data$Name1
data[,c("Name_cleaned","Name1","Name2")]
View(data)
class(data)
data<-read.xlsx("Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame 0308.xlsx",
sheetIndex = 1, encoding ="UTF-8")
data<-data %>% map_if(is.factor,as.character)
str(data)
data<-data %>% map_if(is.factor,as.character) %>% as.data.frame()
str(data)
Encoding(data$Name1)<-"UTF-8"
data$Name2<-iconv(data$Name1,"UTF-8","ASCII",sub = "")
data$Name1
data %>% select('surveyedBefore:sameFirstLetter')
data %>% select_('surveyedBefore:sameFirstLetter')
data1<-data %>% select_('surveyedBefore:sameFirstLetter')
names(data1)
names(data)
data<-data %>% select_(Country,Name_cleaned,Name1,Name2,'surveyedBefore:sameFirstLetter')
data<-data %>% select_('Country','Name_cleaned','Name1','Name2','surveyedBefore:sameFirstLetter')
names(data)
View(data)
table(data$Name2)
nrow(data[grep("Madam",data$Name1),])
rm(data1)
dim(data1)
dim(data)
write.xlsx(data,"Z:/Projects Active/GenStat/Stakeholder Survey/stakeholder sample frame 0308.xlsx",row.names = F)
library(dplyr)
library(nycflights13)
set.seed(123)
data <- sample_n(flights, 3)
data
glimpse(data)
select(data,year:day)
select(data,-year,-month)
select(data, -year, -month, -day)
select(data, -(year:day))
select(data, -(year:day), month)
select(data, year:day, -month)
#utility function
select(data, starts_with("arr"))
select(data, ends_with("time"))
select(data, contains("_"))
select(data, matches("^(dep|arr)_"))
data2 <- data
colnames(data2) <- sprintf("x%d", 1:16)
sprintf("x%d", 1:16)
colnames(data2) <- sprintf("x%d", 1:16) #x1, x2, x3
select(data2, num_range("x", 8:11))
select(data2, num_range("x", c(9, 11)))
colnames(data2) <- sprintf("x%d", 1:16) #x1, x2, x3
select(data2, num_range("x", 8:11))
select(data2, num_range("x", c(9, 11)))
data2 <- data
colnames(data2) <- sprintf("x%d", 1:16) #x1, x2, x3
select(data2, num_range("x", 8:11))
select(data2, num_range("x", c(9, 11)))
colnames(data2)
data2 <- data
colnames(data2) <- sprintf("x%d", 1:19) #x1, x2, x3
select(data2, num_range("x", 8:11))
select(data2, num_range("x", c(9, 11)))
data3 <- data
colnames(data3) <- sprintf("x%02d", 1:19)
select(data3, num_range("x", 8:11, width=2))
select(data3,num_range("x",8:19))
select(data3,num_range("x",8:19))
select(data3, num_range("x", 8:11, width=2))
select(data3, num_range("x", 8:19, width=2))
select(data3,num_range("x",8:19))
select(data3, num_range("x", 8:19, width=2))
select(data3,num_range("x",8:19))
select(data3,num_range("x",8:19,width = 3))
?select
select(data3, num_range("x", 8:19, width=2)) #Optionally, the "width" of the numeric range.
select(data3,num_range("x",8:19,width = 1))
col_vector <- c("year", "month", "day")
select(data, col_vector)
select(data, one_of(col_vector))
select(data, everything())
select(data, -starts_with("arr"))
select_(data,"year","month","day")
select_(data,.dot=col_vector)
select(data,"year:day")
select(data,'year:day')
select_(data,'year:day')
select_(data,"year:day")
select_(data, '-(year:day)')
select_(data, 'starts_with("arr")')
select_(data, '-ends_with("time")')
select_(data, .dots = c('starts_with("arr")', '-ends_with("time")'))
library(dplyr)
library(stringr)
gDat
data(gapminder)
grep("'", "Cote d'Ivoire")
grep("'", "Cote d'Ivoire",value=T)
grep(''', "Cote d'Ivoire",value=T)
grep('\'', "Cote d'Ivoire",value=T)
print("a\nb")
cat("a\nb")
print("a\rb")
cat("a\rb")
print("a\tb")
cat("a\tb")
strings <- c("abcd", "cdab", "cabd", "c abd")
grep("\bab",strings,value=T)
grep("\bab",strings,value=T,fixed=T)
grep("\\bab",strings,value=T)
grep("\\Bab",strings,value=T)
grep("\\bcd",strings,value = T)
grep("\\bbd",strings,value = T)
(strings <- c("^ab", "ab", "abc", "abd", "abe", "ab 12"))
grep("(ab)12",strings,value = T)
grep("(ab) 12",strings,value = T)
grep("(ab)\S12",strings,value = T)
grep("(ab)\s12",strings,value = T)
grep("(ab)[:blank:]12",strings,value = T)
grep("(ab) 12",strings,value = T)
grep("(ab)\\s12",strings,value = T)
grep("(ab)[:blank:]12",strings,value = T)
grep("(ab)\[:blank:]12",strings,value = T)
gsub("(ab)\\s12","\\1 34",strings)
29/127
35/144
36/154
0.060/0.039
0.060/0.038
library(nlexperiment)
nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")  #to netlogo installation on windows
nl_netlogo_path()
setwd("C:/Users/shown/Documents/GitHub/EW-model")
experiment <- nl_experiment(
model_file = "C:/Users/shown/Documents/GitHub/EW-model/EW draft 1.nlogo",
iterations = 100,
repetitions = 3,
param_values = list(
intensityThreshold = seq(0,1,0.2),
orgBudget = seq(0,500,100),
repairRatio=seq(0,1,0.2),
extremeWeatherDamage=seq(0,20,5),
adaptThreshold=seq(0,20,5),
maxPrevention=seq(0,20,5)
),
# mapping = c(
#   intensity_threshold="intensity-threshold",
#   org_budget="org-budget"
# ),
# step_measures = measures(
#  mean_damage = "mean [currentDamage] of serviceArea",
#  mean_preventionPerTick="mean [prevention] of serviceArea"
# ),
run_measures=measures(
mean_infra="mean [infraQuality] of serviceArea",
org_repair_budget="[orgRepairBudget] of orgs",
org_vulnerability = "mean [infraVulnerability] of serviceArea",
repair_cost="sum [repairCost] of serviceArea",
extreme_weather_frequency="extremeWeatherFreq",
prevention="mean [prevention] of serviceArea",
damage="mean [currentDamage] of serviceArea"
),
)
results<-nl_run(experiment,parallel = T,print_progress = T)
results_backup <- results
results1<-nl_get_result(results)
summary(results1)
library(purrr)
results1 %>% select_("intensityThreshold:maxPrevention","mean_infra") %>%
summary()
library(dplyr)
library(ggplot2)
distinct(results1,intensityThreshold)
ggplot(results1,aes(x=factor(intensityThreshold),y=mean_infra))+
geom_violin() +
stat_summary(fun.y=mean, geom = "point")
ggplot(results1,aes(factor(intensityThreshold),mean_infra))+
geom_boxplot()
ggplot(results1,aes(x=factor(orgBudget),y=mean_infra))+
geom_violin()+
stat_summary(fun.y=median,geom="point")
ggplot(results1,aes(x=factor(orgBudget),y=mean_infra))+
geom_boxplot()
ggplot(results1,aes(x=factor(repairRatio),y=mean_infra))+
geom_violin()+
stat_summary(fun.y = median,geom = "point")
names(results1)
ggplot(results1,aes(x=factor(orgBudget),y=mean_infra))+
geom_boxplot()
ggplot(results1,aes(x=factor(extremWeatherDamage),y=mean_infra))+
geom_boxplot()
ggplot(results1,aes(x=factor(extremeWeatherDamage),y=mean_infra))+
geom_boxplot()
