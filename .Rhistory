damage="mean [damagePerTick] of serviceArea",
NumAdapt="sum [adaptTime] of orgs"
),
step_measures=measures(
step_infraQuality="mean [infraQuality] of serviceArea",
step_orgVul= "[orgVulnerability] of orgs",
whetherAdapt="[whetherAdapt] of orgs",
step_prevention="mean [prevention] of serviceArea",
step_repair_cost="sum [repairCost] of serviceArea",
step_meanDamage= "mean [damagePerTick] of serviceArea"
),
repetitions = 1
#random_seed = 1:100
)
resultS2<-nl_run(experimentS2,parallel = T,print_progress = F)
experimentS2 <- nl_experiment(
model_file = module_file_path,
iterations = 120,
param_values = nl_param_oat(
n=1,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
),
# mapping = c(
#   intensity_threshold="intensity-threshold",
#   org_budget="org-budget"
# ),
run_measures=measures(
mean_infra="mean [infraQuality] of serviceArea",
org_repair_budget="[orgRepairBudget] of orgs",
org_vulnerability = "[orgVulnerability] of orgs",
repair_cost="sum [repairCost] of serviceArea",
extreme_weather_frequency="extremeWeatherFreq",
prevention="mean [prevention] of serviceArea",
damage="mean [damagePerTick] of serviceArea",
NumAdapt="sum [adaptTime] of orgs"
),
step_measures=measures(
step_infraQuality="mean [infraQuality] of serviceArea",
step_orgVul= "[orgVulnerability] of orgs",
whetherAdapt="[whetherAdapt] of orgs",
step_prevention="mean [prevention] of serviceArea",
step_repair_cost="sum [repairCost] of serviceArea",
step_meanDamage= "mean [damagePerTick] of serviceArea"
),
repetitions = 10
#random_seed = 1:100
)
resultS2<-nl_run(experimentS2,parallel = T,print_progress = F)
options(java.parameters = "-Xmx8g")
#lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
(.packages())
experimentS2 <- nl_experiment(
model_file = module_file_path,
iterations = 120,
param_values = nl_param_oat(
n=1,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
),
# mapping = c(
#   intensity_threshold="intensity-threshold",
#   org_budget="org-budget"
# ),
run_measures=measures(
mean_infra="mean [infraQuality] of serviceArea",
org_repair_budget="[orgRepairBudget] of orgs",
org_vulnerability = "[orgVulnerability] of orgs",
repair_cost="sum [repairCost] of serviceArea",
extreme_weather_frequency="extremeWeatherFreq",
prevention="mean [prevention] of serviceArea",
damage="mean [damagePerTick] of serviceArea",
NumAdapt="sum [adaptTime] of orgs"
),
step_measures=measures(
step_infraQuality="mean [infraQuality] of serviceArea",
step_orgVul= "[orgVulnerability] of orgs",
whetherAdapt="[whetherAdapt] of orgs",
step_prevention="mean [prevention] of serviceArea",
step_repair_cost="sum [repairCost] of serviceArea",
step_meanDamage= "mean [damagePerTick] of serviceArea"
),
repetitions = 10
#random_seed = 1:100
)
resultS2<-nl_run(experimentS2,parallel = T,print_progress = F)
resultS2_backup <- resultS2
resultS2_run<-nl_get_run_result(resultS2)
resultS2_step<-nl_get_step_result(resultS2)
dim(resultS2_run)
dim(resultS2_step)
nl_param_oat(
n=1,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
)
?nl_param_oat
nl_param_oat(
n=1,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
)
warning()
warnings()
nl_param_oat(
n=1,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
)
View(nl_param_oat(
n=1,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
))
View(nl_param_oat(
n=2,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
))
View(nl_param_oat(
n=10,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
))
experimentS2 <- nl_experiment(
model_file = module_file_path,
iterations = 10,
param_values = nl_param_oat(
n=25,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
),
# mapping = c(
#   intensity_threshold="intensity-threshold",
#   org_budget="org-budget"
# ),
run_measures=measures(
mean_infra="mean [infraQuality] of serviceArea",
org_repair_budget="[orgRepairBudget] of orgs",
org_vulnerability = "[orgVulnerability] of orgs",
repair_cost="sum [repairCost] of serviceArea",
extreme_weather_frequency="extremeWeatherFreq",
prevention="mean [prevention] of serviceArea",
damage="mean [damagePerTick] of serviceArea",
NumAdapt="sum [adaptTime] of orgs"
),
step_measures=measures(
step_infraQuality="mean [infraQuality] of serviceArea",
step_orgVul= "[orgVulnerability] of orgs",
whetherAdapt="[whetherAdapt] of orgs",
step_prevention="mean [prevention] of serviceArea",
step_repair_cost="sum [repairCost] of serviceArea",
step_meanDamage= "mean [damagePerTick] of serviceArea"
),
repetitions = 100
#random_seed = 1:100
)
resultS2<-nl_run(experimentS2,parallel = T,print_progress = F)
resultS2_run<-nl_get_run_result(resultS2)
resultS2_step<-nl_get_step_result(resultS2)
?nl_experiment
runS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 run results.csv"))
stepS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 step results.csv"))
#test how many runs
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
runS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 run results.csv"))
stepS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 step results.csv"))
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
runS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 run results.csv"))
stepS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 step results.csv"))
library(dplyr)
library(stringi)
install.packages("stringi")
library(stringi)
library(dplyr)
runS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 run results.csv"))
stepS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 step results.csv"))
names(runS2)
distinct(runS2,run_id)
distinct(runS2,run_id) %>% arrange()
distinct(runS2,run_id) %>% arrange(run_id)
?sample_n
sampleN<-function(n){
runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
}
runS2 %>% filter(run_id %in% as.list(sample(1:100,10)))
sampleN<-function(n){
df<-runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
distinct(df,run_id)
}
sampleN<-function(n){
df<-runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
print(distinct(df,run_id))
}
sampleN<-function(n){
df<-runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
print(distinct(df,run_id))
}
runS2 %>% filter(run_id %in% as.list(sample(1:100,n))
)
runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
runS2 %>% filter(run_id %in% as.list(sample(1:100,10)))
runS2 %>% filter(run_id %in% as.list(sample(1:100,10))) %>% distinct(run_id)
dim(runS2)
runS2 %>% filter(run_id %in% as.list(sample(1:100,n))) %>% dim()
runS2 %>% filter(run_id %in% as.list(sample(1:100,10))) %>% dim()
runS2 %>% filter(run_id %in% as.list(sample(1:100,n))) %>% dim()
oneRun<-250
RowInOneRun<-250
ncol(runS2)
250*n,ncol
dim(runS2)
paste0("sample",10)
sampleN<-function(n){
df<-matrix(NA,nrow=nrow(runS2)/100 * n,ncol = ncol(runS2))
df_n<-paste0("sample",n)
df_n<-runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
}
rm(RowInOneRun)
seq(10,90,10)
sapply(seq(10,90,10),sampleN)
lapply(seq(10,90,10),sampleN)
lapply(seq(10,90,10),function(x) sampleN(x))
sampleN(10)
sampleN<-function(n){
df<-matrix(NA,nrow=nrow(runS2)/100 * n,ncol = ncol(runS2))
df<-runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
assign(paste0("sample",n),df,.GlobalEnv)
}
sampleN(10)
sampleN(20)
lapply(seq(10,90,10),sampleN)
sampleN(10)
sampleN(20)
sampleN(40)
sampleN(80)
sampleN<-function(n){
df<-matrix(NA,nrow=nrow(runS2)/100 * n,ncol = ncol(runS2))
df<-runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
df<-mutate(df,repetitions=n)
assign(paste0("sample",n),df,.GlobalEnv)
}
sampleN(10)
sampleN(20)
sampleN(40)
sampleN(80)
library(dplyr)
library(stringi)
runS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 run results.csv"))
stepS2<-read.csv(("~/GitHub/EW-model/Experiments/nlexperimentS2 step results.csv"))
sampleN<-function(n){
df<-matrix(NA,nrow=nrow(runS2)/100 * n,ncol = ncol(runS2))
df<-runS2 %>% filter(run_id %in% as.list(sample(1:100,n)))
df<-mutate(df,repetitions=n)
assign(paste0("sample",n),df,.GlobalEnv)
}
sampleN(10)
sampleN(20)
sampleN(40)
sampleN(80)
rbind(runS2,sample10,sample20,sample40,sample80)
ncol(runS2)
dim(sample10)
runS2<-mutate(repetitions=100)
runS2<-mutate(runS2, repetitions=100)
rbind(runS2,sample10,sample20,sample40,sample80)
names(runS2)
rbind(runS2,sample10,sample20,sample40,sample80) %>% ggplot(.,aes(x=repetitions, y=mean_infra))+
geom_boxplot()
library(ggplot2)
rbind(runS2,sample10,sample20,sample40,sample80) %>% ggplot(.,aes(x=repetitions, y=mean_infra))+
geom_boxplot()
rbind(runS2,sample10,sample20,sample40,sample80) %>% ggplot(.,aes(x=factor(repetitions), y=mean_infra))+
geom_boxplot()
summary(rbind(runS2,sample10))
summary(rbind(runS2,sample10)) %>% aov(mean_infra ~ repetitions,data=.)
summary(rbind(runS2,sample10)) %>% aov(`mean_infra` ~ `repetitions`,data=.)
summary(rbind(runS2,sample10))
?aov
summary(rbind(runS2,sample10)) %>% aov(mean_infra~repetitions,data=.)
rbind(runS2,sample10) %>% aov(mean_infra~factor(repetitions),data=.)
summary(rbind(runS2,sample10) %>% aov(mean_infra~factor(repetitions),data=.))
summary(rbind(runS2,sample10) %>% t.test(mean_infra~factor(repetitions),data=.))
rbind(runS2,sample10) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample20) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample20) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample40) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample40) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample80) %>% t.test(mean_infra~factor(repetitions),data=.)
sampleN(5)
rbind(runS2,sample5) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample10) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample20) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample10) %>% t.test(mean_infra~factor(repetitions),data=.)
rbind(runS2,sample40) %>% t.test(mean_infra~factor(repetitions),data=.)
names(runS2)
rbind(runS2,sample40) %>% t.test(org_vulnerability~factor(repetitions),data=.)
rbind(runS2,sample10,sample20,sample40,sample80) %>% ggplot(.,aes(x=factor(repetitions), y=mean_infra))+
geom_boxplot()
rbind(runS2,sample5) %>% t.test(org_vulnerability~factor(repetitions),data=.)
rbind(runS2,sample10) %>% t.test(org_vulnerability~factor(repetitions),data=.)
rbind(runS2,sample20) %>% t.test(org_vulnerability~factor(repetitions),data=.)
rbind(runS2,sample40) %>% t.test(org_vulnerability~factor(repetitions),data=.)
rbind(runS2,sampleN(1)) %>% t.test(mean_infra~factor(repetitions),data=.) #slightly significant
rbind(runS2,sample5) %>% t.test(mean_infra~factor(repetitions),data=.) #slightly significant
rbind(runS2,sampleN(1)) %>% t.test(org_vulnerability~factor(repetitions),data=.)
rbind(runS2,sample5) %>% t.test(org_vulnerability~factor(repetitions),data=.)
getwd()
setwd("~/GitHub/EW-model/Experiments"")
setwd("~/GitHub/EW-model/Experiments")
setwd( "C:/Users/shown/Documents/GitHub/EW-model/Experiments")
# #EW model experiments scenario 1
# #xlcFreeMemory()
# rm(list = ls())
options(java.parameters = "-Xmx4g")
# #lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
# (.packages())
# warnings()
# # Windows
# library(nlexperiment)
# nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")  #to netlogo installation on windows
# nl_netlogo_path()
# setwd("C:/Users/shown/Documents/GitHub/EW-model")
# module_file_path="C:/Users/shown/Documents/GitHub/EW-model/EW model using numeric chooser.nlogo"
# AGAVE
library(nlexperiment)
nl_netlogo_path("/packages/7x/netlogo/6.0.2/app")  #to netlogo installation
nl_netlogo_path()
setwd("/home/fzhang59/dev/EW-model")
module_file_path="/home/fzhang59/dev/EW-model/EW model using numeric chooser.nlogo"
#---use one scenario at one time--------------
experimentS1 <- nl_experiment(
model_file = module_file_path,
iterations = 120,
param_values = nl_param_oat(
n=25,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
cumDamageRatioThreshold=c(0,100,50),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
),
# mapping = c(
#   intensity_threshold="intensity-threshold",
#   org_budget="org-budget"
# ),
run_measures=measures(
mean_infra="mean [infraQuality] of serviceArea",
org_repair_budget="[orgRepairBudget] of orgs",
org_vulnerability = "[orgVulnerability] of orgs",
repair_cost="sum [repairCost] of serviceArea",
extreme_weather_frequency="extremeWeatherFreq",
prevention="mean [prevention] of serviceArea",
damage="mean [damagePerTick] of serviceArea",
NumAdapt="sum [adaptTime] of orgs"
),
step_measures=measures(
step_infraQuality="mean [infraQuality] of serviceArea",
step_orgVul= "[orgVulnerability] of orgs",
whetherAdapt="[whetherAdapt] of orgs",
step_prevention="mean [prevention] of serviceArea",
step_repair_cost="sum [repairCost] of serviceArea",
step_meanDamage= "mean [damagePerTick] of serviceArea"
),
repetitions = 100
#random_seed = 1:100
)
resultS1<-nl_run(experimentS1,parallel = T,print_progress = F)
resultS1_backup <- resultS1
resultS1_run<-nl_get_run_result(resultS1)
resultS1_step<-nl_get_step_result(resultS1)
dim(resultS1_run)
dim(resultS1_step)
write.csv(resultS1_run,"/home/fzhang59/dev/EW-model/Experiment/nlexperimentS1 run results.csv")
write.csv(resultS1_step,"/home/fzhang59/dev/EW-model/Experiment/nlexperimentS1 step results.csv")
experimentS1 <- nl_experiment(
model_file = module_file_path,
iterations = 120,
param_values = nl_param_oat(
n=25,
intensityThreshold = c(0,0.5,1),
orgBudget = c(0,4000,2000),
repairRatio=c(0,1,0.5),
extremeWeatherDamage=c(0,20,10),
adaptThreshold=c(0,10,5),
maxPrevention=c(0,20,10),
cumDamageRatioThreshold=c(0,100,50),
damageRatioThreshold=c(0,0.3,0.15),
interval=c(0,48,24),
numMonths = c(0,48,24),
riskPerceptionThreshold=c(0,150,75),
chooseStrategy= 2
),
# mapping = c(
#   intensity_threshold="intensity-threshold",
#   org_budget="org-budget"
# ),
run_measures=measures(
mean_infra="mean [infraQuality] of serviceArea",
org_repair_budget="[orgRepairBudget] of orgs",
org_vulnerability = "[orgVulnerability] of orgs",
repair_cost="sum [repairCost] of serviceArea",
extreme_weather_frequency="extremeWeatherFreq",
prevention="mean [prevention] of serviceArea",
damage="mean [damagePerTick] of serviceArea",
NumAdapt="sum [adaptTime] of orgs"
),
step_measures=measures(
step_infraQuality="mean [infraQuality] of serviceArea",
step_orgVul= "[orgVulnerability] of orgs",
whetherAdapt="[whetherAdapt] of orgs",
step_prevention="mean [prevention] of serviceArea",
step_repair_cost="sum [repairCost] of serviceArea",
step_meanDamage= "mean [damagePerTick] of serviceArea"
),
repetitions = 100
#random_seed = 1:100
)
resultS1<-nl_run(experimentS1,parallel = T,print_progress = F)
54/308
54/310
save.image("~/GitHub/EW-model/Experiments scenario 2.RData")
